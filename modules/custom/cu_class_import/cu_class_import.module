<?php

// because the details aren't available from cu_master,
// first import the courses to 

/**
 * Implements hook_menu().
 */
function cu_class_import_menu() {
  $items['admin/config/system/class-import'] = array(
      'title' => 'Class Import',
      'description' =>  'Configure Class Import.',
      'page callback' => 'drupal_get_form',
      'page arguments' => array('class_import_admin_settings'),
      'access arguments' => array('administer modules'),
  );

  // COURSES MUST BE IMPORTED FIRST
  $items['course/import'] = array(
    'title' => 'Course Import',
    'page callback' => 'drupal_get_form', 
    'page arguments' => array('cu_course_import_form'), 
    'access callback' => 'cu_class_import_access',
    'type' => MENU_LOCAL_TASK,
    'weight' => 0,
  );
  $items['course/import/process'] = array(
    'title' => 'Processing Course Import',
    'page callback' => 'cu_course_import_process',
    'access callback' => 'cu_class_import_access',
    'type' => MENU_LOCAL_TASK,
    'weight' => 0,
  );
  
  $items['class/import'] = array(
    'title' => 'Class Import',
    'page callback' => 'drupal_get_form', 
    'page arguments' => array('cu_class_import_form'), 
    'access callback' => 'cu_class_import_access',
    'type' => MENU_LOCAL_TASK,
    'weight' => 0,
  );
  
  $items['class/purge'] = array(
    'title' => 'Class Import',
    'page callback' => 'cu_class_import_purge', 
    'access arguments' => array('administer modules'),
    'type' => MENU_CALLBACK,
  );
  
  $items['class/import/process'] = array(
    'title' => 'Class Import',
    'page callback' => 'cu_class_import_process',
    'access callback' => 'cu_class_import_access',
    'type' => MENU_LOCAL_TASK,
    'weight' => 0,
  );
  
  $class_uri = 'class/%cu_class';
  $class_uri_argument_position = 1;
  
  $items[$class_uri . '/update'] = array(
    'title' => 'Update Details',
    'title callback' => 'cu_class_label',
    'title arguments' => array($class_uri_argument_position),
    'page callback' => 'cu_class_import_update',
    'page arguments' => array($class_uri_argument_position),
    'access callback' => cu_class_access,
    'type' => MENU_LOCAL_TASK,
  );
  
  return $items;
}

function class_import_admin_settings() {
  $form = array();

  $form['cu_class_import_url'] = array(
    '#type' => 'textfield',
    '#default_value' => variable_get('cu_class_import_url', 'https://esbprd.prod.cu.edu/Bld_Cs_Any_ClassSearch/2a1/SSR_GET_CLASSES_R.v1/get/classes?type=cu_master&languageCd=en'),
    '#title' => t('Base URL of API'),
    '#description' => t('Disables the lock on ability enable or disable modules required by install profile through the user interface.  This also impacts drush.'),
  );

  $form['cu_class_import_url_prime'] = array(
    '#type' => 'checkbox',
    '#default_value' => variable_get('cu_class_import_url_prime', 0),
    '#title' => t('Use RESTFul Posts'),
    '#description' => t(''),
  );

  return system_settings_form($form);
}
/**
 * Updates all Classes that match the course.
 */
function cu_class_import_update($class) {
  
  // Query the detail
  // Compare to existing entities
  // Save entities with diffs

}

/**
 * Access callback for ??
 */
function cu_class_import_access() {
  // switch to a custom permission?
  return TRUE;
}

/**
 * Process form
 */
function cu_course_import_form() {
  // @TODO: Save imports a something... ctool exportable?
  

  // @TODO: Look these up
  $term_options = array(
    '2154' => t('2015 Summer'),
    '2157' => t('2015 Fall'),
	  '2161' => t('2016 Spring'),
	  '2164' => t('2016 Summer'),
    '2167' => t('2016 Fall'),
  );

	$form['term'] = array(
	  '#type' => 'select',
	  '#default_value' => '2164',
	  '#title' => t('Term'),
	  '#options' => $term_options,
	  '#description' => t('Terms are available X days before enrollment opens'),
	);
  
  
  $subject_options = array(
  'AREN' => 'AREN',
  'GEOG' => 'GEOG',
  'PHIL' => 'PHIL',
  'HIST' => 'HIST',
  'JRNL' => 'JRNL',
  'IAFS' => 'IAFS',
  'HUMN' => 'HUMN',
  'ENGL' => 'ENGL',
  'ECON' => 'ECON',
  'JPNS' => 'JPNS',
  'ANTH' => 'ANTH',
  'LEAD' => 'LEAD',
  'ETHN' => 'ETHN',
  'MUEL' => 'MUEL',
  'EDUC' => 'EDUC',
  'LAWS' => 'LAWS',
  'CLAS' => 'CLAS',
  'DNCE' => 'DNCE',
  'THTR' => 'THTR',
  'ATOC' => 'ATOC',
  'PSYC' => 'PSYC',
  'FREN' => 'FREN',
  'RUSS' => 'RUSS',
  'EBIO' => 'EBIO',
  'PHYS' => 'PHYS',
  'MCEN' => 'MCEN',
  'CVEN' => 'CVEN',
  'ENVD' => 'ENVD',
  'CSCI' => 'CSCI',
  'SPAN' => 'SPAN',
  );

  $form['subject'] = array(
	  '#type' => 'select',
	  '#default_value' => 'HIST',
	  '#title' => t('Subject'),
	  '#options' => $subject_options,
	  '#description' => t(''),
	);
  
  //$form['course_id'] = array(
  //  '#type' => 'textfield', //you can find a list of available types in the form api
  //  '#title' => 'Course ID',
  //  '#size' => 10,
  //  '#maxlength' => 10,
  //);
  
  $form['submit_button'] = array(
    '#type' => 'submit',
    '#value' => t('Import'),
  );
  
  return $form;
}

/**
 * Process form
 */
function cu_course_import_form_submit($form, &$form_state) {

  //$term = '2161';
  $institution = 'CUBLD';
  
  $subject = $form['subject']['#value'];
  $term = $form['term']['#value'];
  
  $response = cu_course_import_curl($institution, $term, $subject, $course_id);

  $xml = simplexml_load_string($response);
    
  if (is_object($xml)) {
    
      //dsm(xml2array_parse($xml)); 
      
      if ($xml->IS_FAULT) {
     
        $error = (string) $xml->SCC_FAULT_RESP->detail->MSGS->MSG->DESCR;
        drupal_set_message($error, 'error');
        return;
      }
      
      if(isset($xml->SEARCH_RESULT->SUBJECTS)){
        foreach ($xml->SEARCH_RESULT->SUBJECTS->children() as $subject) {

          //dsm($subject);

          $course_id = (string) $subject->CRSE_ID;
          $catalog_number = (string) $subject->CATALOG_NBR;
          $title = (string) $subject->COURSE_TITLE_LONG;
          
          $output .= $title . '<br />';

          // check to see if already exists... 
          
          
          // if doesn't exist, add it
          $result = db_query('SELECT * FROM {cu_course} WHERE course_id = :course_id', array(':course_id' => (string) $subject->CRSE_ID));
          if($result->rowCount() > 0) {

            //UPDATE
          }
          else {

            $result = db_insert('cu_course')
              ->fields(array(
                'course_id' => (string) $subject->CRSE_ID,
                'title' => (string) $subject->COURSE_TITLE_LONG,
                'type' => 'course',
                'changed' => REQUEST_TIME,
                'subject' => (string) $subject->SUBJECT,
                'term_id' => $term,
                'inst' => $institution,
                'catalog_nbr' => (string) $subject->CATALOG_NBR,
              ))
              ->execute();

            // NOT SURE WHY THE ENTITY SAVE ISN'T WORKING... come back to this
            //$course = entity_create('cu_course', $values);
            drupal_set_message('Created local copy of Course: ' . (string) $subject->COURSE_TITLE_LONG);

          }
        }
      } // isset
    }
  
  return $ouput;
}


/**
 * Setup the cURL, run it, and write the result to a _latest file.
 * If there is an error it will be logged to the normal php error log.
 */
function cu_course_import_curl($institution, $term, $subject, $course_id = NULL) {

  $request_path = variable_get('cu_class_import_url', 'https://esbprd.prod.cu.edu/Bld_Cs_Any_ClassSearch/2a1/SSR_GET_CLASSES_R.v1/get/classes?type=cu_master&languageCd=en');

  // Setup the cURL
  $curl = curl_init();
  // Empty out the error message.
  $error_message = NULL;

  // when priming courses and classes, we aren't using a post
  if (variable_get('cu_class_import_url_prime', 1)) {
    $request_path .= "$institution/$term/$subject";
  }
  
  drupal_set_message('Attempting to import from ' . $request_path, 'status');
  // Set path
  curl_setopt($curl, CURLOPT_URL, $request_path);
  // Return the transfer as a string of the values if the curl succeeds.
  curl_setopt($curl, CURLOPT_RETURNTRANSFER, true);

  if (!variable_get('cu_class_import_url_prime', 0)) {


    // @TODO: Set these in admin config
    $request_user = 'CU_WS_CLASSSRCH_UCB_CUOL';
    $request_pass = 'YEF9BYQSfFr8UXNmDvM5';
    $request_auth_string = $request_user . ':' . $request_pass;


    // Use a POST rather than a GET
    curl_setopt($curl, CURLOPT_POST, true);
    // This allows us to access the endpoint without verifying the SSL cert.
    curl_setopt($curl, CURLOPT_SSL_VERIFYPEER, false);

    // Use Basic Auth
    curl_setopt($curl, CURLOPT_HTTPAUTH, CURLAUTH_BASIC);
    curl_setopt($curl, CURLOPT_USERPWD, $request_auth_string);

    // <CRSE_ID>' . $course_id .'</CRSE_ID>

    // Additional data that the API takes
    $curl_request_body = '<CLASS_SEARCH_REQUEST><INSTITUTION>' . $institution . '</INSTITUTION><STRM>' . $term . '</STRM><ACAD_CAREER>UGRD</ACAD_CAREER><SUBJECT>' . $subject . '</SUBJECT></CLASS_SEARCH_REQUEST>';
    //dsm($curl_request_body);

    curl_setopt($curl, CURLOPT_POSTFIELDS, $curl_request_body);


  }


  // Get the data! Also check and see if the curl worked and log the error if it did not.
  if (!$curl_response = curl_exec($curl)) {
    $error_message = 'cURL to the Course API failed - ' . curl_error($curl);
    error_log($error_message, 0);
    print_r($error_message);
  }
  // Close the curl to free resources
  curl_close($curl);
  return str_replace('<?xml version="1.0"?>', '', $curl_response);
}

/**
 * Process form
 */
function cu_class_import_form() {
  // @TODO: Save imports a something... ctool exportable?
  
  // query courses?
  $course_options = array();
  $results = db_query('SELECT course_id, title FROM {cu_course}');

  foreach($results as $course) {
    $course_options[$course->course_id] = $course->course_id . ' - ' . $course->title;
  }

	$form['course'] = array(
	  '#type' => 'select',
	  '#title' => t('Course'),
	  '#options' => $course_options,
	  '#description' => t(''),
	);
  
  $form['submit_button'] = array(
    '#type' => 'submit',
    '#value' => t('Import'),
  );
  
  return $form;
}

/**
 * Process form
 */
function cu_class_import_form_submit($form, &$form_state) {

  $term = '2164';
  $institution = 'CUBLD';

  $course_id = $form['course']['#value'];

  //need the subject... could be passing this since the course has it
  $course = db_query('SELECT * FROM {cu_course} WHERE course_id = :course_id', array(':course_id' => (string) $course_id))->fetchObject();

  $response = cu_class_import_curl($institution, $term, $course->subject, $course_id);
  
  //strip ser namespace for now
  $response  = str_replace("ser:", "", $response);
  
  $xml = simplexml_load_string($response);
  //$ns = $xml->getNamespaces(true);
  
  if (is_object($xml)) {

    if ($xml->IS_FAULT) {

      $error = (string) $xml->SCC_FAULT_RESP->detail->MSGS->MSG->DESCR;
      drupal_set_message($error, 'error');
      return;
    }

    if(isset($xml->SEARCH_RESULT->SUBJECTS)){
      foreach ($xml->SEARCH_RESULT->SUBJECTS->SUBJECT->CLASSES_SUMMARY->children() as $class) {

        dsm(xml2array_parse($class));

        $class_id = (string) $class->CLASS_NBR;
        $course_id = (string) $class->CRSE_ID;
        $catalog_number = (string) $class->CATALOG_NBR;
        $title = (string) $class->CRSE_ID_LOVDescr;
        $catalog_nbr = (string) $class->CATALOG_NBR;
        $subject = (string) $class->SUBJECT;
        $session_code = (string) $class->SESSION_CODE;
        $section = (string) $class->CLASS_SECTION;
        $descrlong = (string) $class->SSR_DESCRLONG;
        
        foreach ($class->CLASSES_MEETING_PATTERNS->children() as $meeting) {
          $start = (string) $meeting->START_DT;
          $end = (string) $meeting->END_DT;
       
		  //convert date to Y-m-d
		  $start = date('Y-m-d', strtotime($start));
		  $end = date('Y-m-d', strtotime($end));
		  
		  //SSR_MTG_SCHED_LONG
		  //SSR_MTG_LOC_LONG
		  //SSR_INSTR_LONG
		  
		  $instructor = (string) $meeting->SSR_INSTR_LONG;
		  
		  $start_time = (string) $meeting->MEETING_TIME_START;
		  $end_time = (string) $meeting->MEETING_TIME_END;
		}
           
        // check to see if already exists...
        // if doesn't exist, add it
        // @TODO: Need to check specific sections?
        $result = db_query('SELECT * FROM {cu_class} WHERE class_id = :class_id', array(':class_id' => $class_id));
        if($result->rowCount()) {

          //UPDATE
           $existing_class = entity_load_single('cu_class', $class_id);
 
           //@TODO: diff fields for changes... only save update if there is a difference
           
			$existing_class->field_class_crse_id[LANGUAGE_NONE][0]['value'] = $course_id;
			$existing_class->field_class_course_title_long[LANGUAGE_NONE][0]['value'] = $title;
			$existing_class->field_class_subject[LANGUAGE_NONE][0]['value'] = $subject;
			$existing_class->field_class_institution[LANGUAGE_NONE][0]['value'] = $institution;
			$existing_class->field_class_catalog_nbr[LANGUAGE_NONE][0]['value'] = $catalog_nbr;
			$existing_class->field_class_strm[LANGUAGE_NONE][0]['value'] = $term;
			$existing_class->field_class_class_section[LANGUAGE_NONE][0]['value'] = $section;
			$existing_class->field_class_class_nbr[LANGUAGE_NONE][0]['value'] = $class_id;
			$existing_class->field_class_ssr_descrlong[LANGUAGE_NONE][0]['value'] = $descrlong;
			
			$existing_class->field_class_enrl_cap[LANGUAGE_NONE][0]['value'] = (string) $class->ENRL_CAP;
			$existing_class->field_class_enrl_tot[LANGUAGE_NONE][0]['value'] = (string) $class->ENRL_TOT;
			$existing_class->field_class_wait_tot[LANGUAGE_NONE][0]['value'] = (string) $class->WAIT_TOT;
			$existing_class->field_class_enrl_stat[LANGUAGE_NONE][0]['value'] = (string) $class->ENRL_STAT;
			
			$existing_class->field_class_session_code[LANGUAGE_NONE][0]['value'] = (string) $class->UNITS_ACAD_PROG;
		    $existing_class->field_class_units_acad_prog[LANGUAGE_NONE][0]['value'] = (string) $class->SESSION_CODE;

		    $existing_class->field_class_ssr_instr_long[LANGUAGE_NONE][0]['value'] = $instructor;
			
			$existing_class->field_class_start_dt[LANGUAGE_NONE][0]['value'] = $start;
			$existing_class->field_class_end_dt[LANGUAGE_NONE][0]['value'] = $end;
			$values['field_class_meeting_time_start'][LANGUAGE_NONE][0]['value'] = $start_time;
		    $values['field_class_meeting_time_end'][LANGUAGE_NONE][0]['value'] = $end_time;
			
			$existing_class->field_class_crse_attr[LANGUAGE_NONE][0]['value'] = (string) $class->CRSE_ATTR;
			$existing_class->field_class_crse_attr_value[LANGUAGE_NONE][0]['value'] = (string) $class->CRSE_ATTR_VALUE;
			// expecting format to be 2016-01-08 22:45:45
			$existing_class->field_class_last_updated[LANGUAGE_NONE][0]['value'] = date('Y-m-d h:i:s');
			
			$existing_class->field_class_instruction_mode_des[LANGUAGE_NONE][0]['value'] = (string) $class->INSTRUCTION_MODE;
            
            $updated = entity_save('cu_class', $existing_class);

          drupal_set_message('Updated local copy of Class: ' . $subject . ' ' . $catalog_nbr . ' ' . $section . ' - ' . $title . ' (' . $class_id . ')');
        }
        else {

          $values = array(
            'class_id' => $class_id,
            'title' => $title,
            'course_id' => $course_id,
            'type' => 'class',
          );

          // field_class_ssr_component

          // field_class_scc_latitude
          // field_class_scc_longitude

		$values['field_class_crse_id'][LANGUAGE_NONE][0]['value'] = $course_id;
		$values['field_class_course_title_long'][LANGUAGE_NONE][0]['value'] = $title;
		$values['field_class_subject'][LANGUAGE_NONE][0]['value'] = $subject;
		$values['field_class_institution'][LANGUAGE_NONE][0]['value'] = $institution;
		$values['field_class_catalog_nbr'][LANGUAGE_NONE][0]['value'] = $catalog_nbr;
		$values['field_class_strm'][LANGUAGE_NONE][0]['value'] = $term;
		$values['field_class_class_section'][LANGUAGE_NONE][0]['value'] = $section;
		$values['field_class_class_nbr'][LANGUAGE_NONE][0]['value'] = $class_id;
		$values['field_class_ssr_descrlong'][LANGUAGE_NONE][0]['value'] = $descrlong;

		$values['field_class_enrl_cap'][LANGUAGE_NONE][0]['value'] = (string) $class->ENRL_CAP;
		$values['field_class_enrl_tot'][LANGUAGE_NONE][0]['value'] = (string) $class->ENRL_TOT;
		$values['field_class_wait_tot'][LANGUAGE_NONE][0]['value'] = (string) $class->WAIT_TOT;
		$values['field_class_enrl_stat'][LANGUAGE_NONE][0]['value'] = (string) $class->ENRL_STAT;

		$values['field_class_session_code'][LANGUAGE_NONE][0]['value'] = (string) $class->UNITS_ACAD_PROG;
		$values['field_class_units_acad_prog'][LANGUAGE_NONE][0]['value'] = (string) $class->SESSION_CODE;

		$values['field_class_ssr_instr_long'][LANGUAGE_NONE][0]['value'] = (string) $class->SSR_INSTR_LONG;

		$values['field_class_start_dt'][LANGUAGE_NONE][0]['value'] = $start;
		$values['field_class_end_dt'][LANGUAGE_NONE][0]['value'] = $end;
		$values['field_class_meeting_time_start'][LANGUAGE_NONE][0]['value'] = $start_time;
		$values['field_class_meeting_time_end'][LANGUAGE_NONE][0]['value'] = $end_time;

		$values['field_class_ssr_mtg_sched_long'][LANGUAGE_NONE][0]['value'] = (string) $class->SSR_MTG_SCHED_LONG;

		$values['field_class_crse_attr'][LANGUAGE_NONE][0]['value'] = (string) $class->CRSE_ATTR;
		$values['field_class_crse_attr_value'][LANGUAGE_NONE][0]['value'] = (string) $class->CRSE_ATTR_VALUE;
		// expecting format to be 2016-01-08 22:45:45
		$values['field_class_last_updated'][LANGUAGE_NONE][0]['value'] = date('Y-m-d h:i:s');

		$values['field_class_instruction_mode_des'][LANGUAGE_NONE][0]['value'] = (string) $class->INSTRUCTION_MODE;
        
        $class = entity_create('cu_class', $values);
        $created = entity_save('cu_class', $class);

        drupal_set_message('Created local copy of Class: ' . $subject . ' ' . $catalog_nbr . ' ' . $section . ' - ' . $title . ' (' . $class_id . ')');

        }
      }
    } // isset
  }

  return '';
}

/**
 * Setup the cURL, run it, and write the result to a _latest file.
 * If there is an error it will be logged to the normal php error log.
 */
function cu_class_import_curl($institution, $term, $subject, $course_id = NULL) {

  // Setup our cURL parameters
  $request_path = variable_get('cu_class_import_url', 'https://esbprd.prod.cu.edu/Bld_Cs_Any_ClassSearch/2a1/SSR_GET_CLASSES_R.v1/get/classes?type=cu_detail&languageCd=en');

  //@TODO: need to back this up a level in the config... just replacing for now
  //$request_path = 'http://express.local/express14/primer/class/';
  $request_path = str_replace("courses", "class", $request_path);
  
  
  // Setup the cURL
  $curl = curl_init();
  // Empty out the error message.
  $error_message = NULL;

  // if doesn't exist, add it
  $subject = db_query('SELECT subject FROM {cu_course} WHERE course_id = :course_id', array(':course_id' => $course_id))->fetchField();

  // when priming courses and classes, we aren't using a post
  if (variable_get('cu_class_import_url_prime', 1)) {
    // need subject

    $request_path .= "$institution/$term/$subject/$course_id";
  }
  
  drupal_set_message('Attempting to import from ' . $request_path, 'status');

  // Set path
  curl_setopt($curl, CURLOPT_URL, $request_path);
  // Return the transfer as a string of the values if the curl succeeds.
  curl_setopt($curl, CURLOPT_RETURNTRANSFER, true);

  if (!variable_get('cu_class_import_url_prime', 0)) {


    // @TODO: Set these in admin config
    $request_user = 'CU_WS_CLASSSRCH_UCB_CUOL';
    $request_pass = 'YEF9BYQSfFr8UXNmDvM5';
    $request_auth_string = $request_user . ':' . $request_pass;


    // Use a POST rather than a GET
    curl_setopt($curl, CURLOPT_POST, true);
    // This allows us to access the endpoint without verifying the SSL cert.
    curl_setopt($curl, CURLOPT_SSL_VERIFYPEER, false);

    // Use Basic Auth
    curl_setopt($curl, CURLOPT_HTTPAUTH, CURLAUTH_BASIC);
    curl_setopt($curl, CURLOPT_USERPWD, $request_auth_string);

    // <CRSE_ID>' . $course_id .'</CRSE_ID>

    // Additional data that the API takes
    $curl_request_body = '<CLASS_SEARCH_REQUEST><CRSE_ID>' . $course_id .'</CRSE_ID><INSTITUTION>' . $institution .'</INSTITUTION><STRM>' . $term .'</STRM><ACAD_CAREER>UGRD</ACAD_CAREER><SUBJECT>' . $subject . '</SUBJECT></CLASS_SEARCH_REQUEST>';
    //dsm($curl_request_body);

    curl_setopt($curl, CURLOPT_POSTFIELDS, $curl_request_body);


  }

  // Get the data! Also check and see if the curl worked and log the error if it did not.
  if (!$curl_response = curl_exec($curl)) {
    $error_message = 'cURL to the Course API failed - ' . curl_error($curl);
    error_log($error_message, 0);
    print_r($error_message);
  }
  // Close the curl to free resources
  curl_close($curl);
  //dsm($curl_response);
  return str_replace('<?xml version="1.0"?>', '', $curl_response);
}

function xml2array_parse($xml){ 
     foreach ($xml->children() as $parent => $child){ 
         $return["$parent"] = xml2array_parse($child)?xml2array_parse($child):"$child"; 
     } 
     return $return; 
}

function cu_class_import_purge() {
  
  
  $class = cu_class_load('11582');
  dsm($class);
  $ids = entity_extract_ids('cu_class', $class);
  dsm($ids);
  
  return 'test';
}

// cron

